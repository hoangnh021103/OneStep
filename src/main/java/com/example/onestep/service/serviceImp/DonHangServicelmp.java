package com.example.onestep.service.serviceImp;

import com.example.onestep.dto.request.DonHangDTO;
import com.example.onestep.dto.request.SanPhamDTO;
import com.example.onestep.dto.response.DiaChiResponse;
import com.example.onestep.dto.response.DonHangResponse;
import com.example.onestep.dto.response.SanPhamResponse;
import com.example.onestep.entity.DiaChi;
import com.example.onestep.entity.DonHang;
import com.example.onestep.entity.SanPham;
import com.example.onestep.entity.ChiTietDonHang;
import com.example.onestep.repository.DiaChiRepository;
import com.example.onestep.repository.DonHangRepository;
import com.example.onestep.repository.ChiTietDonHangRepository;
import com.example.onestep.service.DonHangService;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.ArrayList;

@Service
public class DonHangServicelmp implements DonHangService {
    @Autowired
    private DonHangRepository donHangRepository;
    
    @Autowired
    private ChiTietDonHangRepository chiTietDonHangRepository;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public List<DonHangResponse> getAll() {
        return donHangRepository.findAllWithKhachHang().stream()
                .map(this::mapToDonHangResponse)
                .collect(Collectors.toList());
    }

    @Override
    public Page<DonHangResponse> phanTrang(Pageable pageable) {
        Page<DonHang> page = donHangRepository.findAllWithKhachHangPaged(pageable);
        List<DonHangResponse> dtoList = page.getContent().stream()
                .map(this::mapToDonHangResponse)
                .collect(Collectors.toList());
        return new PageImpl<>(dtoList, pageable, page.getTotalElements());
    }

    @Override
    public DonHangResponse add(DonHangDTO dto) {
        System.out.println("=== DEBUG: DonHangService.add() ===");
        System.out.println("DTO loaiDon: " + dto.getLoaiDon());
        
        DonHang entity = modelMapper.map(dto, DonHang.class);
        System.out.println("Entity loaiDon sau khi map: " + entity.getLoaiDon());
        
        // QUAN TR·ªåNG: ƒê·∫£m b·∫£o loaiDon ƒë∆∞·ª£c set ƒë√∫ng t·ª´ DTO
        // ModelMapper c√≥ th·ªÉ b·ªè qua ho·∫∑c override gi√° tr·ªã n√†y
        if (dto.getLoaiDon() != null) {
            entity.setLoaiDon(dto.getLoaiDon());
            System.out.println("üîß ƒê√£ force set loaiDon t·ª´ DTO: " + dto.getLoaiDon());
        }
        
        // ‚úÖ LOGIC M·ªöI: T·ª± ƒë·ªông set tr·∫°ng th√°i "Ho√†n th√†nh" cho ƒë∆°n h√†ng t·∫°i qu·∫ßy
        if (entity.getLoaiDon() != null && entity.getLoaiDon() == 0) {
            entity.setTrangThai(5); // 5 = Ho√†n th√†nh
            System.out.println("üè™ ƒê∆°n h√†ng t·∫°i qu·∫ßy - T·ª± ƒë·ªông set tr·∫°ng th√°i = 5 (Ho√†n th√†nh)");
        } else {
            // ƒê·ªëi v·ªõi ƒë∆°n h√†ng online, gi·ªØ nguy√™n tr·∫°ng th√°i t·ª´ DTO ho·∫∑c m·∫∑c ƒë·ªãnh l√† 1
            if (entity.getTrangThai() == null) {
                entity.setTrangThai(1); // 1 = Ch·ªù x√°c nh·∫≠n (m·∫∑c ƒë·ªãnh cho online)
                System.out.println("üåê ƒê∆°n h√†ng online - Set tr·∫°ng th√°i m·∫∑c ƒë·ªãnh = 1 (Ch·ªù x√°c nh·∫≠n)");
            }
        }
        
        // ƒê·∫£m b·∫£o ng√†y t·∫°o ƒë∆∞·ª£c set ƒë√∫ng cho t·ª´ng ƒë∆°n h√†ng v·ªõi ƒë·ªô ch√≠nh x√°c cao
        // Th√™m m·ªôt ch√∫t delay ƒë·ªÉ tr√°nh tr√πng timestamp
        LocalDateTime now = LocalDateTime.now().withNano((int) (System.nanoTime() % 1_000_000_000));
        entity.setNgayCapNhat(now);
        
        // Debug: Log th·ªùi gian ƒë∆∞·ª£c set
        System.out.println("üïí Set ngayCapNhat: " + now + " for order: " + entity.getMaDon());
        
        // N·∫øu ch∆∞a c√≥ nguoi_tao, set m·∫∑c ƒë·ªãnh
        if (entity.getNguoiTao() == null || entity.getNguoiTao().isEmpty()) {
            entity.setNguoiTao("system");
        }
        
        System.out.println("Entity ngayCapNhat: " + entity.getNgayCapNhat());
        System.out.println("Entity loaiDon tr∆∞·ªõc khi save: " + entity.getLoaiDon());
        System.out.println("Entity trangThai tr∆∞·ªõc khi save: " + entity.getTrangThai());
        
        DonHang saved = donHangRepository.save(entity);
        
        System.out.println("Entity loaiDon sau khi save: " + saved.getLoaiDon());
        System.out.println("Entity trangThai sau khi save: " + saved.getTrangThai());
        System.out.println("Entity ngayCapNhat sau khi save: " + saved.getNgayCapNhat());
        
        DonHangResponse response = modelMapper.map(saved, DonHangResponse.class);
        System.out.println("Response loaiDon: " + response.getLoaiDon());
        System.out.println("Response trangThai: " + response.getTrangThai());
        System.out.println("Response ngayCapNhat: " + response.getNgayCapNhat());
        
        return response;
    }

    @Override
    public DonHangResponse update(Integer id, DonHangDTO dto) {
        System.out.println("=== DEBUG: DonHangService.update() ===");
        System.out.println("ID: " + id);
        System.out.println("DTO trangThai: " + dto.getTrangThai());
        
        Optional<DonHang> optional = donHangRepository.findById(id);
        if (optional.isEmpty()) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + id);
            return null;
        }

        DonHang entity = optional.get();
        System.out.println("Entity trangThai tr∆∞·ªõc khi update: " + entity.getTrangThai());
        
        // C·∫≠p nh·∫≠t th·ªß c√¥ng c√°c tr∆∞·ªùng thay v√¨ d√πng ModelMapper.map()
        // ƒë·ªÉ tr√°nh ghi ƒë√® c√°c tr∆∞·ªùng kh√¥ng mong mu·ªën
        // Note: Kh√¥ng c·∫≠p nh·∫≠t khachHangId v√¨ ƒë√¢y l√† quan h·ªá ManyToOne
        if (dto.getHoTen() != null) entity.setHoTen(dto.getHoTen());
        if (dto.getSoDienThoai() != null) entity.setSoDienThoai(dto.getSoDienThoai());
        if (dto.getEmail() != null) entity.setEmail(dto.getEmail());
        if (dto.getTongTienGoc() != null) entity.setTongTienGoc(dto.getTongTienGoc());
        if (dto.getTienGiam() != null) entity.setTienGiam(dto.getTienGiam());
        if (dto.getTongTien() != null) entity.setTongTien(dto.getTongTien());
        if (dto.getTienShip() != null) entity.setTienShip(dto.getTienShip());
        if (dto.getLoaiDon() != null) entity.setLoaiDon(dto.getLoaiDon());
        if (dto.getGhiChu() != null) entity.setGhiChu(dto.getGhiChu());
        if (dto.getDiaChiGiaoHang() != null) entity.setDiaChiGiaoHang(dto.getDiaChiGiaoHang());
        if (dto.getMaDon() != null) entity.setMaDon(dto.getMaDon());
        if (dto.getNguoiTao() != null) entity.setNguoiTao(dto.getNguoiTao());
        if (dto.getNguoiCapNhat() != null) entity.setNguoiCapNhat(dto.getNguoiCapNhat());
        if (dto.getDaXoa() != null) entity.setDaXoa(dto.getDaXoa());
        
        // ‚úÖ LOGIC M·ªöI: C·∫≠p nh·∫≠t tr·∫°ng th√°i - NGƒÇN CH·∫∂N thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng t·∫°i qu·∫ßy
        if (dto.getTrangThai() != null) {
            // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i ƒë∆°n h√†ng t·∫°i qu·∫ßy kh√¥ng
            if (entity.getLoaiDon() != null && entity.getLoaiDon() == 0) {
                // ƒê∆°n h√†ng t·∫°i qu·∫ßy - KH√îNG CHO PH√âP thay ƒë·ªïi tr·∫°ng th√°i
                System.out.println("üö´ NGƒÇN CH·∫∂N: Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng t·∫°i qu·∫ßy (loaiDon=0)");
                System.out.println("üè™ ƒê∆°n h√†ng t·∫°i qu·∫ßy lu√¥n gi·ªØ tr·∫°ng th√°i = 5 (Ho√†n th√†nh)");
                entity.setTrangThai(5); // Force v·ªÅ tr·∫°ng th√°i ho√†n th√†nh
            } else {
                // ƒê∆°n h√†ng online - CHO PH√âP thay ƒë·ªïi tr·∫°ng th√°i b√¨nh th∆∞·ªùng
                System.out.println("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ " + entity.getTrangThai() + " sang " + dto.getTrangThai());
                entity.setTrangThai(dto.getTrangThai());
            }
        }
        
        // C·∫≠p nh·∫≠t ng√†y x√°c nh·∫≠n n·∫øu c√≥
        if (dto.getNgayXacNhan() != null) entity.setNgayXacNhan(dto.getNgayXacNhan());
        
        // Ch·ªâ c·∫≠p nh·∫≠t ng√†y c·∫≠p nh·∫≠t khi c√≥ thay ƒë·ªïi th·ª±c s·ª± v·ªõi timestamp unique
        LocalDateTime updateTime = LocalDateTime.now().withNano((int) (System.nanoTime() % 1_000_000_000));
        entity.setNgayCapNhat(updateTime);
        
        System.out.println("üïí Update ngayCapNhat: " + updateTime + " for order: " + entity.getMaDon());
        
        // C·∫≠p nh·∫≠t ng∆∞·ªùi c·∫≠p nh·∫≠t
        if (dto.getNguoiCapNhat() != null && !dto.getNguoiCapNhat().isEmpty()) {
            entity.setNguoiCapNhat(dto.getNguoiCapNhat());
        } else {
            entity.setNguoiCapNhat("admin");
        }
        
        System.out.println("Entity trangThai sau khi update: " + entity.getTrangThai());

        DonHang updated = donHangRepository.save(entity);
        System.out.println("‚úÖ L∆∞u th√†nh c√¥ng, trangThai cu·ªëi c√πng: " + updated.getTrangThai());
        
        return modelMapper.map(updated, DonHangResponse.class);
    }

    @Override
    public void delete(Integer id) {
        if (donHangRepository.existsById(id)) {
            donHangRepository.deleteById(id);
        }
    }

    @Override
    public Optional<DonHangResponse> getById(Integer id) {
        return donHangRepository.findById(id)
                .map(this::mapToDonHangResponse);
    }
    
    private DonHangResponse mapToDonHangResponse(DonHang donHang) {
        DonHangResponse response = modelMapper.map(donHang, DonHangResponse.class);
        
        // Debug logging cho trangThai
        System.out.println("üîç mapToDonHangResponse - Entity trangThai: " + donHang.getTrangThai() + " (" + (donHang.getTrangThai() != null ? donHang.getTrangThai().getClass().getSimpleName() : "null") + ")");
        System.out.println("üîç mapToDonHangResponse - Response trangThai: " + response.getTrangThai() + " (" + (response.getTrangThai() != null ? response.getTrangThai().getClass().getSimpleName() : "null") + ")");
        
        // N·∫øu c√≥ kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn, s·ª≠ d·ª•ng th√¥ng tin t·ª´ kh√°ch h√†ng
        if (donHang.getKhachHang() != null) {
            response.setHoTen(donHang.getKhachHang().getHoTen());
            response.setSoDienThoai(donHang.getKhachHang().getSoDienThoai());
            response.setEmail(donHang.getKhachHang().getEmail());
            response.setKhachHangId(donHang.getKhachHang().getId());
        }
        // N·∫øu kh√¥ng c√≥ kh√°ch h√†ng, s·ª≠ d·ª•ng th√¥ng tin ƒë√£ l∆∞u trong ƒë∆°n h√†ng
        // (hoTen, soDienThoai, email ƒë√£ ƒë∆∞·ª£c set t·ª´ DonHangDTO)
        
        // T√≠nh to√°n th√¥ng tin s·∫£n ph·∫©m trong ƒë∆°n h√†ng b·∫±ng query hi·ªáu qu·∫£
        try {
            Integer tongSoLuong = chiTietDonHangRepository.countTotalQuantityByDonHangId(donHang.getId());
            Integer soLoaiSanPham = chiTietDonHangRepository.countProductTypesByDonHangId(donHang.getId());
            
            response.setSoLuongSanPham(tongSoLuong != null ? tongSoLuong : 0);
            response.setSoLoaiSanPham(soLoaiSanPham != null ? soLoaiSanPham : 0);
            
            System.out.println("üìä ƒê∆°n h√†ng " + donHang.getMaDon() + ": " + tongSoLuong + " s·∫£n ph·∫©m (" + soLoaiSanPham + " lo·∫°i)");
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è L·ªói khi t√≠nh to√°n th√¥ng tin s·∫£n ph·∫©m cho ƒë∆°n h√†ng " + donHang.getMaDon() + ": " + e.getMessage());
            response.setSoLuongSanPham(0);
            response.setSoLoaiSanPham(0);
        }
        
        return response;
    }
    
    @Override
    public List<DonHangResponse> getByKhachHangId(Integer khachHangId, Integer loaiDon) {
        // QUAN TR·ªåNG: L·ªçc ƒë∆°n h√†ng theo kh√°ch h√†ng v√† lo·∫°i ƒë∆°n
        // loaiDon = 0: OFFLINE (t·ª´ admin)
        // loaiDon = 1: ONLINE (t·ª´ trangchu)
        return donHangRepository.findAll().stream()
                .filter(donHang -> {
                    // QUAN TR·ªåNG: L·ªçc theo lo·∫°i ƒë∆°n tr∆∞·ªõc (b·∫Øt bu·ªôc)
                    boolean matchLoaiDon = false;
                    if (loaiDon != null) {
                        // N·∫øu c√≥ ch·ªâ ƒë·ªãnh loaiDon, ch·ªâ l·∫•y ƒë∆°n h√†ng c√≥ loaiDon kh·ªõp
                        matchLoaiDon = donHang.getLoaiDon() != null && donHang.getLoaiDon().equals(loaiDon);
                    } else {
                        // N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh, l·∫•y t·∫•t c·∫£
                        matchLoaiDon = true;
                    }
                    
                    // Kh√¥ng l·∫•y ƒë∆°n h√†ng ƒë√£ x√≥a
                    boolean notDeleted = donHang.getDaXoa() == 0;
                    
                    // L·ªçc theo kh√°ch h√†ng (linh ho·∫°t h∆°n)
                    boolean matchKhachHang = true; // M·∫∑c ƒë·ªãnh l√† true
                    if (khachHangId != null) {
                        // N·∫øu c√≥ khachHangId, ki·ªÉm tra kh·ªõp v·ªõi khachHang trong ƒë∆°n h√†ng
                        // HO·∫∂C v·ªõi th√¥ng tin kh√°ch h√†ng trong ƒë∆°n h√†ng (email, sdt)
                        matchKhachHang = (donHang.getKhachHang() != null && 
                                         donHang.getKhachHang().getId().equals(khachHangId));
                                         
                        // N·∫øu kh√¥ng kh·ªõp v·ªõi khachHang entity, c√≥ th·ªÉ ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o v·ªõi th√¥ng tin tr·ª±c ti·∫øp
                        // trong tr∆∞·ªùng h·ª£p n√†y v·∫´n c√≥ th·ªÉ hi·ªÉn th·ªã n·∫øu l√† ƒë∆°n online
                        if (!matchKhachHang && loaiDon != null && loaiDon == 1) {
                            // ƒê·ªëi v·ªõi ƒë∆°n h√†ng ONLINE, cho ph√©p hi·ªÉn th·ªã ngay c·∫£ khi khachHangId kh√¥ng kh·ªõp
                            // v√¨ c√≥ th·ªÉ ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o v·ªõi khachHangId = null
                            matchKhachHang = true;
                            System.out.println("üîÑ Cho ph√©p hi·ªÉn th·ªã ƒë∆°n h√†ng ONLINE kh√¥ng c√≥ khachHang entity: " + donHang.getMaDon());
                        }
                    } else {
                        // QUAN TR·ªåNG: N·∫øu khachHangId = null (g·ªçi t·ª´ /tat-ca-online), 
                        // hi·ªÉn th·ªã T·∫§T C·∫¢ ƒë∆°n h√†ng ONLINE ƒë·ªÉ debug
                        matchKhachHang = true;
                        if (loaiDon != null && loaiDon == 1) {
                            System.out.println("üîß DEBUG: Hi·ªÉn th·ªã t·∫•t c·∫£ ƒë∆°n h√†ng ONLINE: " + donHang.getMaDon());
                        }
                    }
                    
                    // Debug log chi ti·∫øt h∆°n
                    if (donHang.getMaDon() != null) {
                        System.out.println("Filtering: " + donHang.getMaDon() + 
                            " - loaiDon=" + donHang.getLoaiDon() + 
                            " - matchLoaiDon=" + matchLoaiDon +
                            " - khachHangId=" + (donHang.getKhachHang() != null ? donHang.getKhachHang().getId() : "null") +
                            " - requestKhachHangId=" + khachHangId +
                            " - matchKhachHang=" + matchKhachHang +
                            " - email=" + donHang.getEmail() +
                            " - sdt=" + donHang.getSoDienThoai());
                    }
                    
                    return matchKhachHang && matchLoaiDon && notDeleted;
                })
                .sorted((a, b) -> {
                    // S·∫Øp x·∫øp theo ng√†y c·∫≠p nh·∫≠t m·ªõi nh·∫•t tr∆∞·ªõc
                    if (a.getNgayCapNhat() != null && b.getNgayCapNhat() != null) {
                        return b.getNgayCapNhat().compareTo(a.getNgayCapNhat());
                    }
                    return b.getId().compareTo(a.getId());
                })
                .map(this::mapToDonHangResponse)
                .collect(Collectors.toList());
    }
}
