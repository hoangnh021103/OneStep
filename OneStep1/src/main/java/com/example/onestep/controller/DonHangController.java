package com.example.onestep.controller;

import com.example.onestep.dto.request.DonHangDTO;
import com.example.onestep.dto.request.SanPhamDTO;
import com.example.onestep.dto.response.ChiTietGioHangResponse;
import com.example.onestep.dto.response.DonHangResponse;
import com.example.onestep.dto.response.SanPhamResponse;
import com.example.onestep.service.ChiTietGioHangService;
import com.example.onestep.service.DonHangService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/don-hang")
@CrossOrigin(origins = {"http://localhost:5173", "http://localhost:5174"})
public class DonHangController {
    @Autowired
    private DonHangService donHangService;

    @GetMapping("/hien-thi")
    public ResponseEntity<List<DonHangResponse>> getAll() {
        return ResponseEntity.ok(donHangService.getAll());
    }

    @GetMapping("/phan-trang")
    public ResponseEntity<Page<DonHangResponse>> phanTrang(@RequestParam(defaultValue = "0") Integer page) {
        Pageable pageable = PageRequest.of(page, 5);
        return ResponseEntity.ok(donHangService.phanTrang(pageable));
    }

    // 3. Th√™m s·∫£n ph·∫©m
    @PostMapping("/add")
    public ResponseEntity<DonHangResponse> add(@RequestBody @Valid DonHangDTO dto) {
        DonHangResponse response = donHangService.add(dto);
        return ResponseEntity.ok(response);
    }

    // 4. C·∫≠p nh·∫≠t s·∫£n ph·∫©m theo id
    @PutMapping("/update/{id}")
    public ResponseEntity<DonHangResponse> update(@PathVariable Integer id, @RequestBody @Valid DonHangDTO dto) {
        try {
            System.out.println("=== DEBUG: C·∫≠p nh·∫≠t ƒë∆°n h√†ng ID: " + id + " ===");
            System.out.println("Tr·∫°ng th√°i m·ªõi: " + dto.getTrangThai());
            
            // L·∫•y ƒë∆°n h√†ng hi·ªán t·∫°i ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
            Optional<DonHangResponse> currentOrder = donHangService.getById(id);
            if (currentOrder.isEmpty()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + id);
                return ResponseEntity.notFound().build();
            }

            DonHangResponse current = currentOrder.get();
            Integer currentStatus = current.getTrangThai();
            Integer newStatus = dto.getTrangThai();
            
            System.out.println("Tr·∫°ng th√°i hi·ªán t·∫°i: " + currentStatus);
            System.out.println("Tr·∫°ng th√°i m·ªõi: " + newStatus);

            // Validation: Ki·ªÉm tra quy t·∫Øc chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i n·∫øu c√≥ thay ƒë·ªïi tr·∫°ng th√°i
            if (newStatus != null && !newStatus.equals(currentStatus)) {
                System.out.println("üîÑ Ki·ªÉm tra quy t·∫Øc chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i...");
                System.out.println("üîç So s√°nh: currentStatus=" + currentStatus + " (" + currentStatus.getClass().getSimpleName() + 
                                 "), newStatus=" + newStatus + " (" + newStatus.getClass().getSimpleName() + ")");
                System.out.println("üîç newStatus.equals(currentStatus): " + newStatus.equals(currentStatus));
                System.out.println("üîç newStatus != null: " + (newStatus != null));
                
                boolean isValidTransition = isValidStatusTransition(currentStatus, newStatus);
                System.out.println("K·∫øt qu·∫£ validation: " + isValidTransition);
                
                if (!isValidTransition) {
                    System.out.println("‚ùå Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + currentStatus + " -> " + newStatus);
                    return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "message", "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i t·ª´ " + getStatusName(currentStatus) + " sang " + getStatusName(newStatus) + ". Vui l√≤ng ki·ªÉm tra quy t·∫Øc chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i.",
                        "currentStatus", currentStatus,
                        "newStatus", newStatus
                    ));
                }
            } else {
                System.out.println("üîÑ Kh√¥ng c√≥ thay ƒë·ªïi tr·∫°ng th√°i ho·∫∑c newStatus null");
                System.out.println("üîç newStatus: " + newStatus);
                System.out.println("üîç currentStatus: " + currentStatus);
                System.out.println("üîç newStatus.equals(currentStatus): " + (newStatus != null ? newStatus.equals(currentStatus) : "newStatus is null"));
            }

            DonHangResponse updated = donHangService.update(id, dto);
            if (updated == null) {
                System.out.println("‚ùå C·∫≠p nh·∫≠t ƒë∆°n h√†ng th·∫•t b·∫°i");
                return ResponseEntity.notFound().build();
            }
            
            System.out.println("‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng");
            return ResponseEntity.ok(updated);
        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    // 5. Xo√° s·∫£n ph·∫©m theo id
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> delete(@PathVariable Integer id) {
        donHangService.delete(id);
        return ResponseEntity.noContent().build(); // HTTP 204
    }

    // 6. L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo id
    @GetMapping("/{id}")
    public ResponseEntity<DonHangResponse> getById(@PathVariable Integer id) {
        Optional<DonHangResponse> optional = donHangService.getById(id);
        return optional.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // 7. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    @PutMapping("/update-status/{id}")
    public ResponseEntity<DonHangResponse> updateStatus(@PathVariable Integer id, @RequestParam Integer trangThai) {
        try {
            System.out.println("=== DEBUG: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ID: " + id + " ===");
            System.out.println("Tr·∫°ng th√°i m·ªõi: " + trangThai);
            
            // L·∫•y ƒë∆°n h√†ng hi·ªán t·∫°i
            Optional<DonHangResponse> currentOrder = donHangService.getById(id);
            if (currentOrder.isEmpty()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + id);
                return ResponseEntity.notFound().build();
            }

            DonHangResponse current = currentOrder.get();
            Integer currentStatus = current.getTrangThai();
            
            System.out.println("Tr·∫°ng th√°i hi·ªán t·∫°i: " + currentStatus);

            // Validation: Ki·ªÉm tra quy t·∫Øc chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i
            if (!isValidStatusTransition(currentStatus, trangThai)) {
                System.out.println("‚ùå Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + currentStatus + " -> " + trangThai);
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i t·ª´ " + getStatusName(currentStatus) + " sang " + getStatusName(trangThai) + ". Vui l√≤ng ki·ªÉm tra quy t·∫Øc chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i.",
                    "currentStatus", currentStatus,
                    "newStatus", trangThai
                ));
            }

            // T·∫°o DTO v·ªõi th√¥ng tin hi·ªán t·∫°i v√† tr·∫°ng th√°i m·ªõi
            DonHangDTO updateDto = DonHangDTO.builder()
                    .khachHangId(current.getKhachHangId())
                    .hoTen(current.getHoTen())
                    .soDienThoai(current.getSoDienThoai())
                    .email(current.getEmail())
                    .maDon(current.getMaDon())
                    .tongTienGoc(current.getTongTienGoc())
                    .tienShip(current.getTienShip())
                    .tienGiam(current.getTienGiam())
                    .tongTien(current.getTongTien())
                    .loaiDon(current.getLoaiDon())
                    .trangThai(trangThai) // C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi
                    .ghiChu(current.getGhiChu())
                    .nguoiTao(current.getNguoiTao())
                    .ngayCapNhat(java.time.LocalDate.now())
                    .ngayXacNhan(current.getNgayXacNhan())
                    .daXoa(current.getDaXoa())
                    .build();

            DonHangResponse updated = donHangService.update(id, updateDto);
            System.out.println("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng");
            return ResponseEntity.ok(updated);
        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    // 8. Test endpoint ƒë·ªÉ ki·ªÉm tra validation logic
    @GetMapping("/test-validation/{currentStatus}/{newStatus}")
    public ResponseEntity<Map<String, Object>> testValidation(
            @PathVariable Integer currentStatus, 
            @PathVariable Integer newStatus) {
        System.out.println("=== TEST VALIDATION ===");
        System.out.println("Current Status: " + currentStatus);
        System.out.println("New Status: " + newStatus);
        
        boolean isValid = isValidStatusTransition(currentStatus, newStatus);
        
        Map<String, Object> result = new HashMap<>();
        result.put("currentStatus", currentStatus);
        result.put("newStatus", newStatus);
        result.put("isValid", isValid);
        result.put("message", isValid ? "Chuy·ªÉn ƒë·ªïi h·ª£p l·ªá" : "Chuy·ªÉn ƒë·ªïi kh√¥ng h·ª£p l·ªá");
        
        System.out.println("Result: " + result);
        return ResponseEntity.ok(result);
    }

    /**
     * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa vi·ªác chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng
     * Quy t·∫Øc: Ch·ªâ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi theo th·ª© t·ª± ti·∫øn tr√¨nh ho·∫∑c sang tr·∫°ng th√°i h·ªßy
     * 
     * @param currentStatus Tr·∫°ng th√°i hi·ªán t·∫°i
     * @param newStatus Tr·∫°ng th√°i m·ªõi
     * @return true n·∫øu h·ª£p l·ªá, false n·∫øu kh√¥ng h·ª£p l·ªá
     */
    private boolean isValidStatusTransition(Integer currentStatus, Integer newStatus) {
        System.out.println("üîç Ki·ªÉm tra chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i: " + currentStatus + " -> " + newStatus);
        System.out.println("üîç Ki·ªÉu d·ªØ li·ªáu currentStatus: " + (currentStatus != null ? currentStatus.getClass().getSimpleName() : "null"));
        System.out.println("üîç Ki·ªÉu d·ªØ li·ªáu newStatus: " + (newStatus != null ? newStatus.getClass().getSimpleName() : "null"));
        
        // Ki·ªÉm tra null
        if (currentStatus == null || newStatus == null) {
            System.out.println("‚ùå Tr·∫°ng th√°i null kh√¥ng h·ª£p l·ªá");
            return false;
        }
        
        // ƒê·∫£m b·∫£o c·∫£ hai ƒë·ªÅu l√† Integer
        int current = currentStatus.intValue();
        int newStatusInt = newStatus.intValue();
        
        System.out.println("üîç Sau khi convert: current=" + current + ", newStatus=" + newStatusInt);
        
        // Tr·∫°ng th√°i: 1=Ch·ªù x√°c nh·∫≠n, 2=ƒê√£ x√°c nh·∫≠n, 3=Ch·ªù giao, 4=ƒêang giao, 5=Ho√†n th√†nh, 6=ƒê√£ h·ªßy
        
        // Lu√¥n cho ph√©p chuy·ªÉn sang tr·∫°ng th√°i h·ªßy (6) t·ª´ b·∫•t k·ª≥ tr·∫°ng th√°i n√†o
        if (newStatusInt == 6) {
            System.out.println("‚úÖ Cho ph√©p chuy·ªÉn sang tr·∫°ng th√°i h·ªßy");
            return true;
        }
        
        // Kh√¥ng cho ph√©p chuy·ªÉn t·ª´ tr·∫°ng th√°i h·ªßy sang tr·∫°ng th√°i kh√°c
        if (current == 6) {
            System.out.println("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn t·ª´ tr·∫°ng th√°i h·ªßy");
            return false;
        }
        
        // Kh√¥ng cho ph√©p chuy·ªÉn t·ª´ tr·∫°ng th√°i ho√†n th√†nh sang tr·∫°ng th√°i kh√°c
        if (current == 5) {
            System.out.println("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn t·ª´ tr·∫°ng th√°i ho√†n th√†nh");
            return false;
        }
        
        // Quy t·∫Øc chuy·ªÉn ƒë·ªïi theo th·ª© t·ª± ti·∫øn tr√¨nh
        switch (current) {
            case 1: // Ch·ªù x√°c nh·∫≠n
                boolean validFromPending = newStatusInt == 2 || newStatusInt == 3 || newStatusInt == 6;
                System.out.println("Tr·∫°ng th√°i Ch·ªù x√°c nh·∫≠n (1) -> " + newStatusInt + ": " + validFromPending);
                System.out.println("üîç Chi ti·∫øt validation: newStatus==2? " + (newStatusInt == 2) + 
                                 ", newStatus==3? " + (newStatusInt == 3) + 
                                 ", newStatus==6? " + (newStatusInt == 6));
                return validFromPending; // ƒê∆∞·ª£c chuy·ªÉn sang ƒê√£ x√°c nh·∫≠n, Ch·ªù giao ho·∫∑c H·ªßy
            case 2: // ƒê√£ x√°c nh·∫≠n
                boolean validFromConfirmed = newStatusInt == 3 || newStatusInt == 6;
                System.out.println("Tr·∫°ng th√°i ƒê√£ x√°c nh·∫≠n (2) -> " + newStatusInt + ": " + validFromConfirmed);
                return validFromConfirmed; // Ch·ªâ ƒë∆∞·ª£c chuy·ªÉn sang Ch·ªù giao ho·∫∑c H·ªßy
            case 3: // Ch·ªù giao
                boolean validFromShipping = newStatusInt == 4 || newStatusInt == 6;
                System.out.println("Tr·∫°ng th√°i Ch·ªù giao (3) -> " + newStatusInt + ": " + validFromShipping);
                return validFromShipping; // Ch·ªâ ƒë∆∞·ª£c chuy·ªÉn sang ƒêang giao ho·∫∑c H·ªßy
            case 4: // ƒêang giao
                boolean validFromDelivering = newStatusInt == 5 || newStatusInt == 6;
                System.out.println("Tr·∫°ng th√°i ƒêang giao (4) -> " + newStatusInt + ": " + validFromDelivering);
                return validFromDelivering; // Ch·ªâ ƒë∆∞·ª£c chuy·ªÉn sang Ho√†n th√†nh ho·∫∑c H·ªßy
            default:
                System.out.println("‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + current);
                return false;
        }
    }
    
    /**
     * L·∫•y t√™n tr·∫°ng th√°i t·ª´ m√£ s·ªë
     */
    private String getStatusName(Integer status) {
        if (status == null) return "Kh√¥ng x√°c ƒë·ªãnh";
        switch (status) {
            case 1: return "Ch·ªù x√°c nh·∫≠n";
            case 2: return "ƒê√£ x√°c nh·∫≠n";
            case 3: return "Ch·ªù giao";
            case 4: return "ƒêang giao";
            case 5: return "Ho√†n th√†nh";
            case 6: return "ƒê√£ h·ªßy";
            default: return "Kh√¥ng x√°c ƒë·ªãnh";
        }
    }
}
